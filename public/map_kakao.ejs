<!DOCTYPE html>
<html lang="ko">

<head>
  <meta charset="UTF-8" />
  <title>실시간 교통 알림 서비스 - 지도 보기</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- Font Awesome CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
  <style>
    /* 기본 스타일 */
    body {
      margin: 0;
      font-family: Arial, sans-serif;
    }

    /* 헤더 스타일 */
    header {
      background-color: #ff5722;
      color: white;
      padding: 20px;
      text-align: center;
    }

    /* 내비게이션 스타일 */
    nav {
      background-color: #fff3e0;
      padding: 10px;
      text-align: center;
    }

    nav a {
      margin: 0 15px;
      color: #ff5722;
      text-decoration: none;
      font-weight: bold;
    }

    /* 메인 컨텐츠 스타일 */
    main {
      padding: 20px;
    }

    h1 {
      text-align: center;
      margin: 20px 0;
    }

    /* 지도 스타일 */
    #map {
      height: 600px;
      width: 100%;
      position: relative;
      margin-top: 20px;
    }

    /* 버튼 컨테이너 스타일 */
    .button-container {
      position: absolute;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 10px;
      z-index: 1000;
    }

    .button-container button {
      padding: 10px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      color: white;
      display: flex;
      align-items: center;
    }

    #recenter-button {
      background-color: #007bff;
    }

    #toggle-location-button {
      background-color: #28a745;
    }

    #recenter-button i,
    #toggle-location-button i {
      margin-right: 5px;
    }

    #recenter-button:hover {
      background-color: #0056b3;
    }

    #toggle-location-button:hover {
      background-color: #218838;
    }

    #toggle-location-button.active {
      background-color: #218838;
    }

    /* 사용자 ID 입력 폼 스타일 */

    .user-input-container {
      display: flex;
      gap: 10px;
      margin: 20px auto;
      justify-content: center;
    }

    .user-input-container input {
      border: 1px solid #ccc;
      border-radius: 5px;
      font-size: 16px;
      padding: 5px;
    }

    .user-input-container button {
      padding: 10px 15px;
      background-color: #ff5722;
      border: none;
      color: white;
      cursor: pointer;
      border-radius: 5px;
      font-size: 16px;
    }

    .user-input-container button:hover {
      background-color: #e64a19;
    }

    /* 반응형 디자인 */
    @media (max-width: 600px) {
      nav a {
        display: block;
        margin: 10px 0;
      }

      .social-media img {
        width: 25px;
      }

      .button-container {
        flex-direction: column;
      }

      .user-input-container {
        flex-direction: column;
      }
    }

    /* 푸터 스타일 */
    footer {
      background-color: #ffe0b2;
      padding: 20px;
      text-align: center;
      color: #333;
    }

    footer a {
      color: #ff5722;
      text-decoration: none;
      margin: 0 5px;
    }

    footer a:hover {
      text-decoration: underline;
    }

    .social-media {
      margin-top: 10px;
    }

    .social-media i {
      font-size: 24px;
      color: #ff5722;
      margin: 0 10px;
    }

    .social-media a:hover i {
      color: #e64a19;
    }

    /* 모달 스타일 추가 */
    .modal {
      display: none;
      /* 기본적으로 모달은 숨김 */
      position: fixed;
      z-index: 2000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5);
      /* 배경 어둡게 */
    }

    .modal-content {
      background-color: #fefefe;
      margin: 10% auto;
      /* 가운데 정렬 */
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 600px;
      border-radius: 10px;
    }

    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .modal-header h2 {
      margin: 0;
    }

    .close {
      color: #aaa;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }

    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
    }

    .modal-list {
      list-style-type: none;
      padding: 0;
      margin-top: 20px;
    }

    .modal-list li {
      padding: 10px;
      border-bottom: 1px solid #ddd;
      cursor: pointer;
    }

    .modal-list li:hover {
      background-color: #f1f1f1;
    }

    .modal-list li:last-child {
      border-bottom: none;
    }

    .checkbox-container {
      display: flex;
      gap: 10px;
      justify-content: center;
      margin-top: 20px;
    }

    .checkbox-container label {
      font-size: 16px;
    }

    .wrap {
      position: absolute;
      left: 50%;
      bottom: 40px;
      width: 288px;
      transform: translateX(-50%);
      text-align: left;
      /* overflow: hidden; */
      font-size: 12px;
      font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;
      line-height: 1.5;
      z-index: 2;
    }

    .wrap * {
      padding: 0;
      margin: 0;
    }

    .wrap .info {
      position: relative;
      /* Added to make .info the positioning context */
      width: 286px;
      border-radius: 5px;
      border-bottom: 2px solid #ccc;
      border-right: 1px solid #ccc;
      /* Removed overflow: hidden; */
      background: #fff;
    }

    .wrap .info:nth-child(1) {
      border: 0;
      box-shadow: 0px 1px 2px #888;
    }

    .info .title {
      padding: 5px 0 0 10px;
      height: 30px;
      background: #eee;
      border-bottom: 1px solid #ddd;
      font-size: 18px;
      font-weight: bold;
      overflow:
        hidden;
      white-space:
        nowrap;
      text-overflow:
        ellipsis;
    }

    .info .close {
      position: absolute;
      top: 10px;
      right: 10px;
      color: #888;
      width: 17px;
      height: 17px;
      background: url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/overlay_close.png');
    }

    .info .close:hover {
      cursor: pointer;
    }

    .info .body {
      position: relative;
      overflow: hidden;
    }

    .info .desc {
      position: relative;
      margin: 10px 0 0 10px;
    }

    .desc .ellipsis {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    .desc .jibun {
      font-size: 11px;
      color: #888;
      margin-top: -2px;
    }

    .info .img {
      position: absolute;
      top: 6px;
      left: 5px;
      width: 73px;
      height: 71px;
      border: 1px solid #ddd;
      color: #888;
      overflow: hidden;
    }

    .info:after {
      content: '';
      position: absolute;
      margin-left: -12px;
      left: 50%;
      bottom: -12px;
      /* Adjusted to ensure the arrow is visible */
      width: 22px;
      height: 12px;
      background: url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png');
    }

    .info .link {
      color: #5085BB;
    }
  </style>
</head>

<body>
  <!-- 헤더 시작 -->
  <header>
    <h1>실시간 교통 알림 서비스</h1>
    <p>최신 교통 정보를 한눈에 확인하고 경로를 계획하세요!</p>
  </header>
  <!-- 헤더 끝 -->

  <!-- 내비게이션 바 시작 -->
  <nav>
    <a href="/">홈으로</a>
    <a href="/map">지도 보기</a>
    <a href="/generator-driving">경로 찾기</a>
  </nav>
  <!-- 내비게이션 바 끝 -->

  <!-- 메인 콘텐츠 시작 -->
  <main>
    <!-- 지도 제목 -->
    <h2>지도 보기</h2>

    <!-- 사용자 ID 입력 폼 -->
    <div class="user-input-container">
      <input type="text" id="userIdInput" placeholder="사용자 ID 입력" />
      <button id="searchUserPathButton">사용자 이동 검색</button>
    </div>

    <!-- 체크 박스 추가 -->
    <div class="checkbox-container">
      <label for="traffic">
        <input type="checkbox" id="traffic" name="traffic" checked="checked" />
        돌발교통
      </label>
      <label for="people">
        <input type="checkbox" id="people" name="people" checked="checked" />
        보행자사고
      </label>
      <label for="dog">
        <input type="checkbox" id="dog" name="dog" checked="checked" />
        반려동물
      </label>
    </div>

    <!-- 지도 영역 -->
    <div id="map">
      <div class="button-container">
        <button id="toggle-location-button">
          <i class="fas fa-location-arrow"></i> 위치 추적 토글
        </button>
        <button id="recenter-button">
          <i class="fas fa-sync-alt"></i> 지도 중심 재검색
        </button>
      </div>
    </div>
  </main>
  <!-- 메인 콘텐츠 끝 -->

  <!-- 모달 시작 -->
  <div id="userPathModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>이동 경로 선택</h2>
        <span class="close">&times;</span>
      </div>
      <ul id="userPathList" class="modal-list">
        <!-- 이동 경로 목록이 여기 추가됩니다 -->
      </ul>
    </div>
  </div>
  <!-- 모달 끝 -->

  <!-- 푸터 시작 -->
  <footer id="contact">
    <p>이 프로젝트는 오픈 소스로 개발되었습니다. 자세한 내용은 GitHub에서 확인하세요.</p>
    <div class="social-media">
      <a href="https://github.com/lahuman/traffic-alert" target="_blank" aria-label="GitHub">
        <i class="fab fa-github"></i>
      </a>
    </div>
    <p>
      <a href="https://github.com/lahuman/traffic-alert/blob/main/terms.md" target="_blank">이용약관</a>
    </p>
  </footer>
  <!-- 푸터 끝 -->

  <!-- 카카오 지도 API -->
  <script type="text/javascript"
    src="//dapi.kakao.com/v2/maps/sdk.js?appkey=8b66476c28fc24a77351a868703545a9&libraries=services,drawing"></script>
  <script>

    let userMarker;
    let radiusCircle;
    let locationIntervalId;
    let markers = [];
    let overlays = [];
    let circle = null;
    let polyline = null;

    // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다
    const trafficMarkerImage = new kakao.maps.MarkerImage('/traffic.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const peopleMarkerImage = new kakao.maps.MarkerImage('/people.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const hospitelMarkerImage = new kakao.maps.MarkerImage('/hospitel.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const pharmacyMarkerImage = new kakao.maps.MarkerImage('/pharmacy.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const clutureMarkerImage = new kakao.maps.MarkerImage('/cluture.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const museumMarkerImage = new kakao.maps.MarkerImage('/museum.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const galleryMarkerImage = new kakao.maps.MarkerImage('/gallery.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const petSuppliesMarkerImage = new kakao.maps.MarkerImage('/pet-supplies.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const restaurantMarkerImage = new kakao.maps.MarkerImage('/restaurant.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const cafeMarkerImage = new kakao.maps.MarkerImage('/cafe.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const destinationMarkerImage = new kakao.maps.MarkerImage('/destination.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const pethotelMarkerImage = new kakao.maps.MarkerImage('/pet-hotel.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const hotelMarkerImage = new kakao.maps.MarkerImage('/hotel.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const haircutMarkerImage = new kakao.maps.MarkerImage('/haircut.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const resortMarkerImage = new kakao.maps.MarkerImage('/resort.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const startMarkerImage = new kakao.maps.MarkerImage('/start.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })
    const theendMarkerImage = new kakao.maps.MarkerImage('/the-end.png', new kakao.maps.Size(32, 36), { offset: new kakao.maps.Point(14, 26) })


    // 지도 생성
    var mapContainer = document.getElementById('map'),
      mapOption = {
        center: new kakao.maps.LatLng(37.5665, 126.978),
        level: 4
      };
    var map = new kakao.maps.Map(mapContainer, mapOption);

    // 아이콘 콘텐츠 생성 함수
    function getIconContentByCategory(category) {
      switch (category) {
        case "동물약국":
          return pharmacyMarkerImage;
        case "동물병원":
          return hospitelMarkerImage;
        case "문예회관":
          return clutureMarkerImage;
        case "미술관":
          return galleryMarkerImage;
        case "박물관":
          return museumMarkerImage;
        case "반려동물용품":
          return petSuppliesMarkerImage;
        case "식당":
          return restaurantMarkerImage;
        case "여행지":
          return destinationMarkerImage;
        case "위탁관리":
          return pethotelMarkerImage;
        case "까페":
        case "카페":
          return cafeMarkerImage;
        case "펜션":
          return resortMarkerImage;
        case "호텔":
          return hotelMarkerImage;
        case "미용":
          return haircutMarkerImage;
        default:
          console.warn(`Unknown category: ${category}`);
          return destinationMarkerImage;
      }
    }

    function closeOverlay(index) {
      overlays[index].setMap(null);
    }


    // 마커 생성 함수
    function createMarker({
      store_name,
      type_nm,
      post_num,
      phone_num,
      web_site,
      day_off,
      operating_hours,
      paking_yn,
      price_num,
      latitude,
      longitude,
      title,
      address,
      start_dtm,
      end_dtm,
      update_dtm,
      icon,
      year,
      occxrrnc_cnt,
    }) {
      const position = new kakao.maps.LatLng(latitude, longitude);

      const marker = new kakao.maps.Marker({
        position: position,
        image: icon === "PET" ? getIconContentByCategory(type_nm) : icon
      });

      marker.setMap(map);
      markers.push(marker);

      let popupContent = '<div class="wrap">' +
        '    <div class="info">' +
        '        <div class="title">' +
        (store_name ? store_name : title ? title : `[보행사고] ${year} 년도 ${occxrrnc_cnt} 건`) +
        '            <div class="close" onclick="closeOverlay(' + (overlays.length) + ')" title="닫기"></div>' +
        '        </div>' +
        '        <div class="body">' +
        '            <div class="desc">';

      if (type_nm) popupContent += `<div class="ellipsis"> 업종: ${type_nm}</div>`;
      if (address) popupContent += `<div class="ellipsis"> 주소: ${address}</div>`;
      if (phone_num) popupContent += `<div class="jibun ellipsis"> 전화번호: ${phone_num}</div>`;
      if (web_site && web_site != "정보없음") popupContent += `<div class="jibun ellipsis"> 웹사이트: <a href="${web_site}" target="_blank">${web_site}</a></div>`;
      if (day_off) popupContent += `<div class="jibun ellipsis"> 휴무일: ${day_off}</div>`;
      if (operating_hours) popupContent += `<div class="jibun ellipsis"> 운영 시간: ${operating_hours}</div>`;
      if (paking_yn) popupContent += `<div class="jibun ellipsis"> 주차 가능: ${paking_yn === 'Y' ? '예' : '아니오'}</div>`;
      if (price_num) popupContent += `<div class="jibun ellipsis"> 가격 정보: ${price_num}</div>`;
      if (start_dtm) popupContent += `<div class="jibun ellipsis"> Start: ${formatDate(start_dtm)}</div>`;
      if (end_dtm) popupContent += `<div class="jibun ellipsis"> End: ${formatDate(end_dtm)}</div>`;
      if (update_dtm) popupContent += `<div class="jibun ellipsis"> Last Updated: ${formatDate(update_dtm)}</div>`;

      popupContent += '            </div>' +
        '        </div>' +
        '    </div>' +
        '</div>';

      // 마커 위에 커스텀오버레이를 표시합니다
      // 마커를 중심으로 커스텀 오버레이를 표시하기위해 CSS를 이용해 위치를 설정했습니다
      var overlay = new kakao.maps.CustomOverlay({
        content: popupContent,
        position: marker.getPosition()
      });

      // 마커를 클릭했을 때 커스텀 오버레이를 표시합니다
      kakao.maps.event.addListener(marker, 'click', function () {
        clearOverlays();
        overlay.setMap(map);
      });

      overlays.push(overlay)

    }

    // 날짜 형식 변환 함수
    function formatDate(isoDateString) {
      const date = new Date(isoDateString);
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");
      const hours = String(date.getHours()).padStart(2, "0");
      const minutes = String(date.getMinutes()).padStart(2, "0");
      return `${year}-${month}-${day} ${hours}:${minutes}`;
    }

    // 사용자 경로 그리기 함수
    function drawUserPath(pathData) {

      const latLngs = pathData.map((data) => {
        const wkt = data.user_location;
        const point = wkt.match(/\(([^)]+)\)/)[1].split(" ");
        return new kakao.maps.LatLng(parseFloat(point[1]), parseFloat(point[0]));
      });

      map.setCenter(latLngs[0]);

      var polyline = new kakao.maps.Polyline({
        path: latLngs,
        strokeWeight: 4,
        strokeColor: 'blue',
        strokeOpacity: 0.7,
        strokeStyle: 'solid'
      });

      polyline.setMap(map);


      if (latLngs.length > 0) {
        const startMarker = new kakao.maps.Marker({
          position: latLngs[0],
          image: startMarkerImage,
          map
        });

        markers.push(startMarker);
        const endMarker = new kakao.maps.Marker({
          position: latLngs[latLngs.length - 1],
          image: theendMarkerImage,
          map: map
        });

        markers.push(endMarker);
      }
    }

    // 사용자 경로 정보 가져오기
    async function fetchUserPathCall(url) {
      const response = await fetch(url, {
        headers: {
          "Content-Type": "application/json",
          authKey: "<%= authKey %>",
        },
      });
      return response;
    }

    // 경고 데이터 가져오기
    async function fetchAlert4Path(url, icon) {
      const response = await fetchUserPathCall(url);

      if (response.status !== 200) {
        return;
      }

      const data = await response.json();

      data.forEach((incident) => {
        createMarker({ ...incident, icon });
      });
    }

    // 모달 관련 변수
    const modal = document.getElementById("userPathModal");
    const modalCloseBtn = document.querySelector(".modal .close");
    const userPathList = document.getElementById("userPathList");

    // 모달 닫기 이벤트
    modalCloseBtn.onclick = function () {
      modal.style.display = "none";
    };

    // 모달 외부 클릭 시 닫기
    window.onclick = function (event) {
      if (event.target == modal) {
        modal.style.display = "none";
      }
    };

    // 사용자 ID 기반 목록 조회
    async function fetchUserPathInfo(userId) {
      const url = `/user-path-info?userId=${userId}`;
      const response = await fetchUserPathCall(url);
      if (response.status !== 200) {
        alert("사용자 경로 정보를 가져오는데 실패했습니다.");
        return;
      }

      const pathInfoData = await response.json();

      userPathList.innerHTML = "";

      if (pathInfoData.length === 0) {
        const noDataItem = document.createElement("li");
        noDataItem.textContent = "이동 경로가 없습니다.";
        userPathList.appendChild(noDataItem);
      } else {
        pathInfoData.forEach((item) => {
          const listItem = document.createElement("li");
          listItem.textContent = `이동 ID: ${item.movement_id}, 이동 거리: ${item.move_km.toFixed(2)}km, 시작 시간: ${formatDate(item.start_dtm)}`;
          listItem.dataset.movementId = item.movement_id;
          listItem.onclick = function () {
            fetchUserPath(userId, this.dataset.movementId);
            modal.style.display = "none";
          };
          userPathList.appendChild(listItem);
        });
      }

      modal.style.display = "block";
    }

    // 사용자 경로 가져오기
    async function fetchUserPath(userId, movementId) {
      clearMarkers();

      const url = `/user-path?userId=${userId}&movementId=${movementId}`;
      const response = await fetchUserPathCall(url);
      if (response.status !== 200) {
        alert("Failed to fetch user path");
        return;
      }

      const userPathData = await response.json();

      drawUserPath(userPathData);

      if (document.getElementById("traffic").checked)
        await fetchAlert4Path(`/user-path-traffic-alert?userId=${userId}&movementId=${movementId}`, trafficMarkerImage);
      if (document.getElementById("people").checked)
        await fetchAlert4Path(`/user-path-walk-alert?userId=${userId}&movementId=${movementId}`, peopleMarkerImage);
      if (document.getElementById("dog").checked)
        await fetchAlert4Path(`/user-path-pet-store?userId=${userId}&movementId=${movementId}`, "PET");
    }

    document.getElementById("searchUserPathButton").addEventListener("click", () => {
      const userId = document.getElementById("userIdInput").value;
      if (userId) {
        fetchUserPathInfo(userId);
      } else {
        alert("Please enter ID.");
      }
    });

    function clearOverlays() {
      for (var i = 0; i < overlays.length; i++) {
        if (overlays[i]) overlays[i].setMap(null);
      }
    }

    // 마커 및 오버레이 제거 함수
    function clearMarkers() {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
        if (overlays[i]) overlays[i].setMap(null);
      }

      if (circle) circle.setMap(null);

      circle = null;
      markers = [];
      overlays = [];
    }



    // 위치 변경 및 데이터 가져오기
    async function changeLocation(lat, lon) {
      clearMarkers();
      // 지도에 표시할 원을 생성합니다
      circle = new kakao.maps.Circle({
        center: new kakao.maps.LatLng(lat, lon),  // 원의 중심좌표 입니다 
        radius: 5000, // 미터 단위의 원의 반지름입니다 
        strokeWeight: 1, // 선의 두께입니다 
        strokeColor: '#75B8FA', // 선의 색깔입니다
        strokeOpacity: 1, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
        strokeStyle: 'dashed', // 선의 스타일 입니다
        fillColor: '#CFE7FF', // 채우기 색깔입니다
        fillOpacity: 0.5  // 채우기 불투명도 입니다   
      });
      circle.setMap(map);

      if (document.getElementById("people").checked) {
        const walkAlerts = await fetchData(
          `/walk-alert?lat=${lat}&lon=${lon}&radius=5000`,
          peopleMarkerImage
        );
        walkAlerts.forEach((incident) => createMarker(incident));
      }

      if (document.getElementById("traffic").checked) {
        const trafficAlerts = await fetchData(
          `/traffic-alert?lat=${lat}&lon=${lon}&radius=5000`,
          trafficMarkerImage
        );
        trafficAlerts.forEach((incident) => createMarker(incident));
      }
      if (document.getElementById("dog").checked) {
        const stores = await fetchData(
          `/pet-store?lat=${lat}&lon=${lon}&radius=500`,
          "PET"
        );
        stores.forEach((incident) => createMarker(incident));
      }
    }


    // 데이터 가져오기
    async function fetchData(url, icon) {
      try {
        const response = await fetch(url, {
          headers: {
            "Content-Type": "application/json",
            authKey: "<%= authKey %>",
          },
        });

        if (response.status !== 200) {
          throw new Error("Failed to fetch data");
        }

        const data = await response.json();
        return data.map((incident) => ({
          ...incident,
          icon,
        }));
      } catch (error) {
        console.error("Error fetching data:", error);
        return [];
      }
    }

    // 위치 추적 관련 함수
    function startLocationTracking() {
      if (locationIntervalId) {
        clearInterval(locationIntervalId);
      }

      locationIntervalId = setInterval(() => {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(onLocationFound, onLocationError);
        } else {
          alert("Geolocation is not supported by this browser.");
        }
      }, 5000);
    }

    function stopLocationTracking() {
      if (locationIntervalId) {
        clearInterval(locationIntervalId);
        locationIntervalId = null;
      }
    }

    function onLocationFound(e) {
      const { latitude, longitude } = e.coords;

      changeLocation(latitude, longitude);

      if (userMarker) {
        userMarker.setMap(null);
      }

      userMarker = new kakao.maps.Marker({
        map: map,
        position: new kakao.maps.LatLng(latitude, longitude)
      });

      map.setCenter(new kakao.maps.LatLng(latitude, longitude));
    }

    function onLocationError(e) {
      console.error("Error retrieving location:", e.message);
      const button = document.getElementById("toggle-location-button");
      button.classList.remove("active");
      button.innerHTML = '<i class="fas fa-location-arrow"></i> 위치 추적 토글';
      stopLocationTracking();
      alert("Unable to retrieve your location.");
    }

    document.getElementById("recenter-button").addEventListener("click", () => {
      const center = map.getCenter();
      changeLocation(center.getLat(), center.getLng());
    });

    document.getElementById("toggle-location-button").addEventListener("click", () => {
      const button = document.getElementById("toggle-location-button");

      if (button.classList.contains("active")) {
        button.classList.remove("active");
        button.innerHTML = '<i class="fas fa-location-arrow"></i> 위치 추적 토글';
        stopLocationTracking();
      } else {
        button.classList.add("active");
        button.innerHTML = '<i class="fas fa-stop"></i> 추적 중지';
        startLocationTracking();
      }
    });

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(onLocationFound, onLocationError);
    } else {
      alert("Geolocation is not supported by this browser.");
    }
  </script>
</body>

</html>